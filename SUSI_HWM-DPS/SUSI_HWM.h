/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.2.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: 2019年10月2日
 ***********************************************************************************************/

#ifndef SUSI_HWM
#define SUSI_HWM

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"
#include "parson.h"

/**
* Type definition
*/

/**
* Device telemetries related methods.
*/

double Sensors_Information_Telemetry_ReadVvcore();

double Sensors_Information_Telemetry_ReadVvcore2();

double Sensors_Information_Telemetry_ReadV25v();

double Sensors_Information_Telemetry_ReadV33v();

double Sensors_Information_Telemetry_ReadV5v();

double Sensors_Information_Telemetry_ReadV12v();

double Sensors_Information_Telemetry_ReadV5vstandby();

double Sensors_Information_Telemetry_ReadV3vstandby();

double Sensors_Information_Telemetry_ReadVcmosbattery();

double Sensors_Information_Telemetry_ReadV5nv();

double Sensors_Information_Telemetry_ReadV12nv();

double Sensors_Information_Telemetry_ReadVvtt();

double Sensors_Information_Telemetry_ReadV24v();

double Sensors_Information_Telemetry_ReadTcpu();

double Sensors_Information_Telemetry_ReadTchipset();

double Sensors_Information_Telemetry_ReadTsystem();

double Sensors_Information_Telemetry_ReadTcpu2();

double Sensors_Information_Telemetry_ReadFcpu();

double Sensors_Information_Telemetry_ReadFsystem();

double Sensors_Information_Telemetry_ReadFcpu2();

/**
* Device properties related methods.
*/
char* Device_Detailed_Information_Property_GetBiosVersion();

char* Device_Detailed_Information_Property_GetECFirmware();

char* Device_Detailed_Information_Property_GetDriverVersion();

char* Device_Detailed_Information_Property_GetLibraryVersion();

char* Device_Detailed_Information_Property_GetFirmwareVersion();

char* Device_Detailed_Information_Property_GetLastConnectedAt();

char* DeviceInfo_Property_GetManufacturer();

char* DeviceInfo_Property_GetModel();

char* DeviceInfo_Property_GetSwVersion();

char* DeviceInfo_Property_GetOsName();

char* DeviceInfo_Property_GetProcessorArchitecture();

char* DeviceInfo_Property_GetProcessorManufacturer();

long DeviceInfo_Property_GetTotalStorage();

long DeviceInfo_Property_GetTotalMemory();

/**
* Device commands related methods.
*/

// Callbacks to handle the confirmation result of sending telemetry
void SendTelemetry_Succeeded_Callback(const char* interfaceName, const char* telemetryName);
void SendTelemetry_Error_Callback(const char* interfaceName, const char* telemetryName);

// Callbacks to handle the confirmation result of reporting property
void ReportProperty_Succeeded_Callback(const char* interfaceName, const char* propertyName);
void ReportProperty_Error_Callback(const char* interfaceName, const char* propertyName);

#ifdef __cplusplus
}
#endif

#endif // SUSI_HWM
